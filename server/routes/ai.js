const express = require("express");
const dotenv = require("dotenv");
const fetch = (...args) => import("node-fetch").then(({ default: fetch }) => fetch(...args));

dotenv.config();

const router = express.Router();

router.get("/", async (req, res) => {
  res.status(200).json({ message: "Hello from AI!" });
});

// POST route for image generation
router.post("/", async (req, res) => {
  try {
    if (!req.body || !req.body.prompt) {
      console.log("Invalid or missing request body:", req.body);
      return res.status(400).json({ error: "Prompt is required in the request body" });
    }

    const { prompt } = req.body;

    const controller = new AbortController();
    const timeoutId = setTimeout(() => {
      console.log("Pollinations AI request timed out");
      controller.abort();
    }, 60000); // 1 minute timeout

    console.log(`Generating image with prompt: "${prompt}"`);

    const encodedPrompt = encodeURIComponent(prompt);
    
    // Pollinations AI used
    const pollinationsUrl = `https://image.pollinations.ai/prompt/${encodedPrompt}`;
    
    console.log(`Requesting from: ${pollinationsUrl}`);

    const response = await fetch(pollinationsUrl, {
      method: "GET",
      signal: controller.signal,
    });

    clearTimeout(timeoutId);

    console.log('Response status:', response.status);

    if (!response.ok) {
      const error = await response.text();
      console.error("Pollinations AI Error:", error);
      return res.status(500).json({ error: `Pollinations AI Error: ${error}` });
    }

    // Get the image as buffer
    const arrayBuffer = await response.arrayBuffer();
    
    if (arrayBuffer.byteLength === 0) {
      console.error("Empty response from Pollinations AI");
      return res.status(500).json({ error: "Empty response from Pollinations AI" });
    }

    // Convert to base64
    const base64Image = Buffer.from(arrayBuffer).toString("base64");
    console.log("Image generated successfully with Pollinations AI");

    res.status(200).json({ 
      photo: base64Image,
      service: "Pollinations AI"
    });

  } catch (err) {
    console.error("Server Error:", err.message, err.stack);
    
    if (err.name === 'AbortError') {
      return res.status(408).json({ error: "Request timed out. Please try again." });
    }
    
    res.status(500).json({ error: err.message || "Something went wrong" });
  }
});

module.exports = router;

// Image generated by Pollinations AI is fetched directly as binary data
// and converted to base64 string to send back to the client
// The client then decodes the base64 string and displays the image
